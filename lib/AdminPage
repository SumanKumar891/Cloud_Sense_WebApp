import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:fl_chart/fl_chart.dart';
import 'DeviceGraphPage.dart'; // Keep only DeviceGraphPage import

class AdminPage extends StatefulWidget {
  const AdminPage({Key? key}) : super(key: key);

  @override
  State<AdminPage> createState() => _AdminPageState();
}

class _AdminPageState extends State<AdminPage> {
  // Device API
  final String apiUrl =
      "https://xa9ry8sls0.execute-api.us-east-1.amazonaws.com/CloudSense_device_activity_api_function";

  // User API
  final String userApiUrl =
      "https://25e5bsdhwd.execute-api.us-east-1.amazonaws.com/default/CloudSense_users_delete_function";

  bool isLoading = true;
  List<Map<String, dynamic>> allDevices = [];
  int totalActive = 0;
  int totalInactive = 0;

  String filter = "All"; // All | Active | Inactive
  String searchQuery = "";

  // users from API
  List<Map<String, String>> users = [];
  bool isUsersLoading = true;

  // sidebar state (for mobile)
  bool _sidebarOpen = false;

  @override
  void initState() {
    super.initState();
    fetchDevices();
    fetchUsers();
  }

  Future<void> fetchDevices() async {
    setState(() => isLoading = true);
    try {
      final response = await http.get(Uri.parse(apiUrl));
      print("Device API Status: ${response.statusCode}");
      print("Device API Body: ${response.body}");
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final keysToInclude = [
          'WS_Device_Activity',
          'Awadh_Jio_Device_Activity',
          'weather_Device_Activity',
        ];

        final List<Map<String, dynamic>> devices = [];
        for (final key in keysToInclude) {
          final list = data[key];
          if (list is List) {
            for (final device in list) {
              final topic = device['Topic']?.toString() ?? "Unknown";
              // Skip devices with BF or CS topics
              if (topic.startsWith('BF/') || topic.startsWith('CS/')) {
                print("Skipping device with Topic: $topic");
                continue;
              }
              final DateTime? lastTime = parseDate(device['lastReceivedTime']);
              bool isActive = false;
              if (lastTime != null) {
                final diff = DateTime.now().difference(lastTime);
                isActive = diff.inHours <= 24;
              }
              devices.add({
                "DeviceId": device['DeviceId']?.toString() ?? "Unknown",
                "lastReceivedTime": lastTime?.toString() ?? "N/A",
                "isActive": isActive,
                "group": key,
                "Topic": topic,
                "LastKnownLongitude": device['LastKnownLongitude']?.toString() ?? "0",
                "LastKnownLatitude": device['LastKnownLatitude']?.toString() ?? "0",
              });
            }
          } else {
            print("Key $key not found or not a List in response");
          }
        }

        final int activeCount = devices.where((d) => d['isActive'] == true).length;
        final int inactiveCount = devices.length - activeCount;

        setState(() {
          allDevices = devices;
          totalActive = activeCount;
          totalInactive = inactiveCount;
          isLoading = false;
        });
      } else {
        setState(() => isLoading = false);
        _toast("Device API error: ${response.statusCode}");
      }
    } catch (e) {
      print("Device API Exception: $e");
      setState(() => isLoading = false);
      _toast("Device fetch failed");
      if (kDebugMode) debugPrint("fetchDevices error: $e");
    }
  }

  Future<void> fetchUsers() async {
    setState(() => isUsersLoading = true);
    for (int attempt = 1; attempt <= 3; attempt++) {
      try {
        final response = await http.get(Uri.parse("$userApiUrl?action=list")).timeout(Duration(seconds: 10));
        print("User API Status: ${response.statusCode}");
        print("User API Full Body: ${response.body}");
        if (response.statusCode == 200) {
          final data = json.decode(response.body);
          print("Decoded Data Type: ${data.runtimeType}, Data: $data");
          List<Map<String, String>> userList = [];

          if (data is Map && data.containsKey('users') && data['users'] is List) {
            userList = (data['users'] as List).map<Map<String, String>>((email) {
              print("User email: $email");
              return {
                "email": email.toString(),
                "name": email.toString().split('@')[0],
                "role": "User",
              };
            }).toList();
          } else {
            print("Unexpected response format: ${data.runtimeType}");
          }

          setState(() {
            users = userList;
            isUsersLoading = false;
          });

          if (users.isEmpty) {
            print("User list is empty after parsing");
            _toast("No valid user data received");
          }
          return;
        } else {
          print("API failed with status: ${response.statusCode}, Attempt: $attempt");
          if (attempt == 3) {
            setState(() => isUsersLoading = false);
            _toast("User API error: ${response.statusCode}");
            return;
          }
        }
      } catch (e) {
        print("User API Exception (Attempt $attempt): $e");
        if (attempt == 3) {
          setState(() => isUsersLoading = false);
          _toast("User fetch failed: $e");
        }
      }
      await Future.delayed(Duration(seconds: 2));
    }
  }

  DateTime? parseDate(String? dateStr) {
    if (dateStr == null) return null;
    try {
      final compactRegex = RegExp(r'^\d{8}T\d{6}$');
      if (compactRegex.hasMatch(dateStr)) {
        final y = int.parse(dateStr.substring(0, 4));
        final m = int.parse(dateStr.substring(4, 6));
        final d = int.parse(dateStr.substring(6, 8));
        final H = int.parse(dateStr.substring(9, 11));
        final M = int.parse(dateStr.substring(11, 13));
        final S = int.parse(dateStr.substring(13, 15));
        return DateTime(y, m, d, H, M, S);
      }
      return DateTime.tryParse(dateStr.replaceAll('  ', ' '));
    } catch (_) {
      return null;
    }
  }

  List<Map<String, dynamic>> get filteredDevices {
    Iterable<Map<String, dynamic>> list = allDevices;
    if (filter == "Active") {
      list = list.where((d) => d['isActive'] == true);
    } else if (filter == "Inactive") {
      list = list.where((d) => d['isActive'] == false);
    }
    if (searchQuery.isNotEmpty) {
      final q = searchQuery.toLowerCase();
      list = list.where((d) =>
          d['DeviceId'].toString().toLowerCase().contains(q) ||
          d['group'].toString().toLowerCase().contains(q) ||
          d['Topic'].toString().toLowerCase().contains(q));
    }
    final sorted = list.toList()
      ..sort((a, b) {
        if (a['isActive'] == b['isActive']) {
          return a['DeviceId'].toString().compareTo(b['DeviceId'].toString());
        }
        return a['isActive'] ? -1 : 1;
      });
    return sorted;
  }

  void _toast(String msg) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(msg)));
  }

({String category, String prefix}) _mapCategoryAndPrefix(String topic) {
  if (topic == 'WS/Campus/2') {
    return (category: 'Sekhon Farm Sensor', prefix: 'CF');
  }
  if (topic.contains('WS/Campus')) {
    return (category: 'IIT Ropar Sensor', prefix: 'CP');
  }
  if (topic.contains('WS/SSMet/NARL')) {
    return (category: 'NARL Sensor', prefix: 'NA');
  }
  if (topic.contains('WS/SSMet/KJSCE')) {
    return (category: 'KJ Sensor', prefix: 'KJ');
  }
  if (topic.contains('WS/SSMet')) {
    return (category: 'SSMET Sensor', prefix: 'SM');
  }
  if (topic.contains('WS/SVPU')) {
    return (category: 'SVPU Sensor', prefix: 'SV');
  }
  if (topic.contains('WS/Mysuru')) {
    return (category: 'Mysuru NIE Sensor', prefix: 'MY');
  }
  if (topic.contains('WS/KARGIL')) {
    return (category: 'Kargil Sensor', prefix: 'KD');
  }
  if (topic.contains('IIT/WS')) {
    return (category: 'IIT Bombay Sensor', prefix: 'IT');
  }
  return (category: 'Unknown Sensor', prefix: '');
}
Future<void> _deleteUser(String email) async {
    print("Attempting to delete user with email: $email");
    final url = "$userApiUrl?email_id=$email&action=delete_user";
    print("Initial Delete API URL: $url");
    print("Initial Delete API Method: DELETE");
    try {
      // Initial DELETE request to get confirmation prompt
      final response = await http.delete(Uri.parse(url));
      print("Initial Delete API Status: ${response.statusCode}");
      print("Initial Delete API Response Body: ${response.body}");
      if (response.statusCode == 200) {
        final responseBody = json.decode(response.body);
        print("Initial Delete API Decoded Response: $responseBody");
        // Check if response requires confirmation
        if (responseBody is Map && responseBody['message']?.toString().toLowerCase().contains('confirm_delete=yes') == true) {
          // Show backend confirmation message in a popup
          if (!mounted) return;
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: const Text("Confirm Deletion"),
              content: Text(responseBody[''] ?? "Are you sure you want to delete this user?"),
              actions: [
                TextButton(
                  onPressed: () {
                    print("Backend confirmation cancelled for user: $email");
                    Navigator.pop(context);
                  },
                  child: const Text("Cancel"),
                ),
                TextButton(
                  onPressed: () async {
                    print("Backend confirmation accepted for user: $email");
                    Navigator.pop(context);
                    // Send second DELETE request with confirm_delete=yes
                    final confirmUrl = "$userApiUrl?email_id=$email&action=delete_user&confirm_delete=yes";
                    print("Confirm Delete API URL: $confirmUrl");
                    print("Confirm Delete API Method: DELETE");
                    try {
                      final confirmResponse = await http.delete(Uri.parse(confirmUrl));
                      print("Confirm Delete API Status: ${confirmResponse.statusCode}");
                      print("Confirm Delete API Response Body: ${confirmResponse.body}");
                      if (confirmResponse.statusCode == 200) {
                        final confirmResponseBody = json.decode(confirmResponse.body);
                        print("Confirm Delete API Decoded Response: $confirmResponseBody");
                        if (confirmResponseBody is Map && confirmResponseBody['message']?.toString().toLowerCase().contains('deleted') == true) {
                          print("User deletion successful for email: $email (Status: ${confirmResponse.statusCode})");
                          _toast("User $email deleted successfully");
                          await fetchUsers(); // Refresh users list
                          print("User list refreshed after deletion");
                        } else {
                          print("User deletion failed for email: $email. Confirm response indicates no deletion: ${confirmResponse.body}");
                          _toast("Failed to delete user $email: ${confirmResponseBody['message'] ?? 'Unknown error'}");
                        }
                      } else if (confirmResponse.statusCode == 404) {
                        print("User deletion successful for email: $email (Status: 404 - User not found)");
                        _toast("User $email deleted");
                        await fetchUsers(); // Refresh users list
                        print("User list refreshed after deletion");
                      } else {
                        print("User deletion failed for email: $email. Confirm Status Code: ${confirmResponse.statusCode}");
                        print("Confirm Failure Response Body: ${confirmResponse.body}");
                        _toast("Failed to delete user $email: Status ${confirmResponse.statusCode}");
                      }
                    } catch (e) {
                      print("Exception during confirm deletion for email: $email. Error: $e");
                      _toast("Error deleting user $email: $e");
                      if (kDebugMode) debugPrint("confirmDeleteUser error: $e");
                    }
                  },
                  child: const Text("Delete", style: TextStyle(color: Colors.red)),
                ),
              ],
            ),
          );
        } else if (responseBody is Map && responseBody['message']?.toString().toLowerCase().contains('deleted') == true) {
          print("User deletion successful for email: $email (Status: ${response.statusCode})");
          _toast("User $email deleted successfully");
          await fetchUsers(); // Refresh users list
          print("User list refreshed after deletion");
        } else {
          print("User deletion failed for email: $email. Initial response indicates no deletion: ${response.body}");
          _toast("Failed to delete user $email: ${responseBody['message'] ?? 'Unknown error'}");
        }
      } else if (response.statusCode == 404) {
        print("User deletion successful for email: $email (Status: 404 - User not found)");
        _toast("User $email not found, treated as deleted");
        await fetchUsers(); // Refresh users list
        print("User list refreshed after deletion");
      } else {
        print("User deletion failed for email: $email. Initial Status Code: ${response.statusCode}");
        print("Initial Failure Response Body: ${response.body}");
        _toast("Failed to delete user $email: Status ${response.statusCode}");
      }
    } catch (e) {
      print("Exception during initial deletion for email: $email. Error: $e");
      _toast("Error deleting user $email: $e");
      if (kDebugMode) debugPrint("deleteUser error: $e");
    }
  }

  List<PieChartSectionData> _pieSections() {
    final double active = (totalActive > 0) ? totalActive.toDouble() : 0;
    final double inactive = (totalInactive > 0) ? totalInactive.toDouble() : 0;
    final total = active + inactive;
    if (total == 0) {
      return [
        PieChartSectionData(
          color: Colors.grey.shade400,
          value: 1,
          title: 'No Data',
          radius: 46,
          titleStyle: TextStyle(fontSize: 12, color: Colors.white),
        )
      ];
    }
    return [
      PieChartSectionData(
        color: Colors.green,
        value: active,
        title: '${((active / total) * 100).toStringAsFixed(0)}%',
        radius: 48,
        titleStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold, color: Colors.white),
      ),
      PieChartSectionData(
        color: Colors.red,
        value: inactive,
        title: '${((inactive / total) * 100).toStringAsFixed(0)}%',
        radius: 48,
        titleStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold, color: Colors.white),
      ),
    ];
  }

  Map<String, int> get _groupCounts {
    final Map<String, int> m = {};
    for (final d in allDevices) {
      final g = (d['group'] ?? 'unknown').toString();
      m[g] = (m[g] ?? 0) + 1;
    }
    return m;
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    final bg = isDark ? const Color(0xFF0F1115) : const Color(0xFFF3F5F7);
    final card = isDark ? const Color(0xFF161A22) : Colors.white;
    final subtle = isDark ? Colors.white70 : Colors.black54;
    final strong = isDark ? Colors.white : Colors.black;

    final width = MediaQuery.of(context).size.width;
    final isWide = width >= 1000;
    

    return Scaffold(
      backgroundColor: bg,
      drawer: width < 900 ? _buildDrawer(strong) : null,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: bg,
        leading: width < 900
            ? IconButton(
                icon: Icon(Icons.menu, color: strong),
                onPressed: () => Scaffold.of(context).openDrawer(),
              )
            : null,
        title: Text(
          'Admin Dashboard',
          style: TextStyle(
            color: strong,
            fontWeight: FontWeight.w700,
            letterSpacing: 0.2,
          ),
        ),
        actions: [
          IconButton(
            tooltip: 'Refresh devices',
            onPressed: fetchDevices,
            icon: Icon(Icons.refresh, color: strong),
          ),
        ],
      ),
      body: Row(
        children: [
          if (isWide) SizedBox(width: 260, child: _buildSidebar(strong, subtle, card)),
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(18),
              child: Column(
                children: [
                  LayoutBuilder(builder: (_, c) {
                    final cross = isWide ? 4 : (width > 700 ? 3 : 2);
                    return GridView.count(
                      crossAxisCount: cross,
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      mainAxisSpacing: 12,
                      crossAxisSpacing: 12,
                      childAspectRatio: 2.6,
                      children: [
                        _StatCard(
                          title: "Total Devices",
                          value: (allDevices.length).toString(),
                          icon: Icons.devices,
                          iconBg: Colors.blue,
                          cardColor: card,
                          strong: strong,
                          subtle: subtle,
                        ),
                        _StatCard(
                          title: "Active",
                          value: totalActive.toString(),
                          icon: Icons.check_circle,
                          iconBg: Colors.green,
                          cardColor: card,
                          strong: strong,
                          subtle: subtle,
                        ),
                        _StatCard(
                          title: "Inactive",
                          value: totalInactive.toString(),
                          icon: Icons.cancel,
                          iconBg: Colors.red,
                          cardColor: card,
                          strong: strong,
                          subtle: subtle,
                        ),
                        _StatCard(
                          title: "Users",
                          value: users.length.toString(),
                          icon: Icons.people_alt,
                          iconBg: Colors.orange,
                          cardColor: card,
                          strong: strong,
                          subtle: subtle,
                        ),
                      ],
                    );
                  }),

                  const SizedBox(height: 18),

                  LayoutBuilder(builder: (_, c) {
                    final cross = isWide ? 2 : 1;
                    return GridView.count(
                      crossAxisCount: cross,
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      mainAxisSpacing: 16,
                      crossAxisSpacing: 16,
                      childAspectRatio: isWide ? 1.3 : 0.95,
                      children: [
                        _SectionCard(
                          title: "Devices",
                          cardColor: card,
                          strong: strong,
                          subtle: subtle,
                          child: isLoading
                              ? const Center(child: Padding(
                                  padding: EdgeInsets.all(24.0),
                                  child: CircularProgressIndicator(),
                                ))
                              : Column(
                                  children: [
                                    Row(
                                      children: [
                                        _ChipFilter(
                                          value: filter,
                                          onChanged: (v) {
                                            setState(() => filter = v);
                                          },
                                          strong: strong,
                                          subtle: subtle,
                                          isDark: isDark,
                                        ),
                                        const SizedBox(width: 12),
                                        Expanded(
                                          child: _SearchField(
                                            hint: "Search device id, group, or topic...",
                                            onChanged: (q) => setState(() {
                                              searchQuery = q;
                                            }),
                                            strong: strong,
                                            subtle: subtle,
                                            isDark: isDark,
                                          ),
                                        ),
                                        const SizedBox(width: 8),
                                        IconButton(
                                          tooltip: "Refresh",
                                          onPressed: fetchDevices,
                                          icon: Icon(Icons.refresh, color: strong),
                                        ),
                                      ],
                                    ),
                                    const SizedBox(height: 10),
                                    const Divider(height: 1),
                                    const SizedBox(height: 8),
                                    ConstrainedBox(
                                      constraints: const BoxConstraints(maxHeight: 480),
                                      child: filteredDevices.isEmpty
                                          ? Center(child: Text("No devices found", style: TextStyle(color: subtle)))
                                          : Scrollbar(
                                              thumbVisibility: true,
                                              child: ListView.separated(
                                                itemCount: filteredDevices.length,
                                                separatorBuilder: (_, __) => Divider(color: subtle.withOpacity(.12)),
                                                itemBuilder: (_, i) {
                                                  final d = filteredDevices[i];
                                                  final active = d['isActive'] == true;
                                                  final topic = d['Topic']?.toString() ?? "Unknown";
                                                  final deviceId = d['DeviceId']?.toString() ?? "Unknown";
                                                  final ({String category, String prefix}) mapped = _mapCategoryAndPrefix(topic);
                                                  final sensorName = mapped.prefix.isNotEmpty
                                                      ? "${mapped.prefix}${deviceId.padLeft(3, '0')}"
                                                      : deviceId;
                                                  final sequentialName = "${mapped.category}";

                                                  return ListTile(
                                                    leading: _StatusDot(color: active ? Colors.green : Colors.red),
                                                   title: Text("ID: $sensorName", style: TextStyle(color: strong, fontWeight: FontWeight.w700)),
  subtitle: Text("Name: $sequentialName\nLast: ${d['lastReceivedTime']}", style: TextStyle(color: subtle)),
                                                    trailing: Container(
                                                      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                                                      decoration: BoxDecoration(
                                                        color: (active ? Colors.green : Colors.red).withOpacity(.12),
                                                        borderRadius: BorderRadius.circular(20),
                                                      ),
                                                      child: Text(active ? "Active" : "Inactive", style: TextStyle(color: active ? Colors.green : Colors.red, fontWeight: FontWeight.w700)),
                                                    ),
                                                    onTap: () {
                                                      print("Navigating to sensor data for DeviceId: $deviceId, Topic: $topic, sensorName: $sensorName, sequentialName: $sequentialName");
                                                      Navigator.push(
                                                        context,
                                                        MaterialPageRoute(
                                                          builder: (context) => DeviceGraphPage(
                                                            deviceName: sensorName,
                                                            sequentialName: sequentialName,
                                                            backgroundImagePath: 'assets/backgroundd.jpg',
                                                          ),
                                                        ),
                                                      );
                                                    },
                                                  );
                                                },
                                              ),
                                            ),
                                    ),
                                  ],
                                ),
                        ),

                        _SectionCard(
                          title: "User Accounts",
                          cardColor: card,
                          strong: strong,
                          subtle: subtle,
                          child: isUsersLoading
                              ? const Center(child: Padding(
                                  padding: EdgeInsets.all(24.0),
                                  child: CircularProgressIndicator(),
                                ))
                              : users.isNotEmpty
                                  ? Column(
                                      children: [
                                        Align(alignment: Alignment.centerLeft, child: Text("Total ${users.length}", style: TextStyle(color: subtle))),
                                        const SizedBox(height: 8),
                                        const Divider(height: 1),
                                        const SizedBox(height: 8),
                                        ConstrainedBox(
                                          constraints: const BoxConstraints(maxHeight: 480),
                                          child: Scrollbar(
                                            thumbVisibility: true,
                                            child: ListView.separated(
                                              itemCount: users.length,
                                              separatorBuilder: (_, __) => Divider(color: subtle.withOpacity(.12)),
                                              itemBuilder: (_, i) {
                                                final u = users[i];
                                                return ListTile(
                                                  leading: CircleAvatar(backgroundColor: Colors.blue.withOpacity(.12), child: const Icon(Icons.person, color: Colors.blue)),
                                                  title: Text(u["name"] ?? "", style: TextStyle(color: strong, fontWeight: FontWeight.w700)),
                                                  subtitle: Text("${u["email"]} • ${u["role"]}", style: TextStyle(color: subtle)),
                                                  trailing: IconButton(
                                                    tooltip: "Delete",
                                                    onPressed: () {
                                                      print("User selected for deletion: ${u['email']}");
                                                      _deleteUser(u["email"]!);
                                                    },
                                                    icon: const Icon(Icons.delete, color: Colors.red),
                                                  ),
                                                );
                                              },
                                            ),
                                          ),
                                        ),
                                      ],
                                    )
                                  : Center(
                                      child: Column(
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          Text("No users available", style: TextStyle(color: subtle)),
                                          const SizedBox(height: 8),
                                          ElevatedButton(
                                            onPressed: fetchUsers,
                                            child: Text("Retry"),
                                          ),
                                        ],
                                      ),
                                    ),
                        ),
                      ],
                    );
                  }),

                  const SizedBox(height: 16),

                  _SectionCard(
                    title: "Analytics",
                    cardColor: card,
                    strong: strong,
                    subtle: subtle,
                    child: Column(
                      children: [
                        const SizedBox(height: 6),
                        Row(
                          children: [
                            Expanded(
                              flex: 1,
                              child: Card(
                                color: card,
                                elevation: 2,
                                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                                child: Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Column(
                                    children: [
                                      Align(alignment: Alignment.centerLeft, child: Text("Active vs Inactive", style: TextStyle(color: strong, fontWeight: FontWeight.w700))),
                                      const SizedBox(height: 8),
                                      SizedBox(
                                        height: 160,
                                        child: PieChart(
                                          PieChartData(
                                            sections: _pieSections(),
                                            centerSpaceRadius: 28,
                                            sectionsSpace: 2,
                                          ),
                                        ),
                                      ),
                                      const SizedBox(height: 8),
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: [
                                          _LegendDot(color: Colors.green, text: "Active ($totalActive)"),
                                          const SizedBox(width: 12),
                                          _LegendDot(color: Colors.red, text: "Inactive ($totalInactive)"),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              flex: 2,
                              child: Card(
                                color: card,
                                elevation: 2,
                                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                                child: Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Column(
                                    children: [
                                      Align(alignment: Alignment.centerLeft, child: Text("Devices per Group", style: TextStyle(color: strong, fontWeight: FontWeight.w700))),
                                      const SizedBox(height: 8),
                                      SizedBox(
                                        height: 180,
                                        child: BarChart(
                                          BarChartData(
                                            alignment: BarChartAlignment.spaceAround,
                                            maxY: (_groupCounts.values.isEmpty) ? 1 : (_groupCounts.values.reduce((a, b) => a > b ? a : b) + 1).toDouble(),
                                            barTouchData: BarTouchData(enabled: true),
                                            titlesData: FlTitlesData(
                                              leftTitles: AxisTitles(sideTitles: SideTitles(showTitles: true, reservedSize: 30)),
                                              bottomTitles: AxisTitles(sideTitles: SideTitles(showTitles: true, getTitlesWidget: (v, meta) {
                                                final idx = v.toInt();
                                                final keys = _groupCounts.keys.toList();
                                                if (idx < 0 || idx >= keys.length) return const SizedBox();
                                                return SideTitleWidget(
                                                  meta: meta,
                                                  child: Text(
                                                    keys[idx],
                                                    style: TextStyle(color: subtle, fontSize: 10),
                                                  ),
                                                );
                                              })),
                                              rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                                              topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
                                            ),
                                            gridData: FlGridData(show: false),
                                            borderData: FlBorderData(show: false),
                                            barGroups: _groupCounts.isEmpty
                                                ? [BarChartGroupData(x: 0, barRods: [BarChartRodData(toY: 1, color: Colors.grey)])]
                                                : _groupCounts.keys.toList().asMap().entries.map((e) {
                                                    final idx = e.key;
                                                    final key = e.value;
                                                    final val = _groupCounts[key]!.toDouble();
                                                    return BarChartGroupData(x: idx, barRods: [BarChartRodData(toY: val, color: Colors.blueAccent, width: 16)]);
                                                  }).toList(),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSidebar(Color strong, Color subtle, Color cardColor) {
    return Container(
      color: cardColor,
      child: Column(
        children: [
          Container(
            height: 90,
            padding: const EdgeInsets.symmetric(horizontal: 16),
            alignment: Alignment.centerLeft,
            child: Text("CloudSense", style: TextStyle(color: strong, fontSize: 18, fontWeight: FontWeight.w800)),
          ),
          const Divider(height: 1),
          ListTile(
            leading: const Icon(Icons.dashboard),
            title: const Text("Dashboard"),
            onTap: () {},
          ),
          ListTile(
            leading: const Icon(Icons.devices),
            title: const Text("Devices"),
            onTap: () {},
          ),
          ListTile(
            leading: const Icon(Icons.people),
            title: const Text("Users"),
            onTap: () {},
          ),
          ListTile(
            leading: const Icon(Icons.settings),
            title: const Text("Settings"),
            onTap: () {},
          ),
          const Spacer(),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Text("v1.0.0", style: TextStyle(color: subtle)),
          )
        ],
      ),
    );
  }

  Widget _buildDrawer(Color strong) {
    return Drawer(
      child: Column(
        children: [
          DrawerHeader(child: Text('CloudSense', style: TextStyle(color: strong, fontSize: 24, fontWeight: FontWeight.w800))),
          ListTile(leading: const Icon(Icons.dashboard), title: const Text("Dashboard")),
          ListTile(leading: const Icon(Icons.devices), title: const Text("Devices")),
          ListTile(leading: const Icon(Icons.people), title: const Text("Users")),
          ListTile(leading: const Icon(Icons.settings), title: const Text("Settings")),
        ],
      ),
    );
  }

  void _showDeviceDetails(Map<String, dynamic> d) {
    showDialog(
      context: context,
      builder: (_) {
        final active = d['isActive'] == true;
        return AlertDialog(
          title: Text("Device ${d['DeviceId']}"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text("Group: ${d['group']}"),
              const SizedBox(height: 6),
              Text("Topic: ${d['Topic']}"),
              const SizedBox(height: 6),
              Text("Last: ${d['lastReceivedTime']}"),
              const SizedBox(height: 6),
              Row(children: [
                Text("Status: "),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
                  decoration: BoxDecoration(color: (active ? Colors.green : Colors.red).withOpacity(.12), borderRadius: BorderRadius.circular(12)),
                  child: Text(active ? "Active" : "Inactive", style: TextStyle(color: active ? Colors.green : Colors.red, fontWeight: FontWeight.bold)),
                ),
              ]),
            ],
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text("Close"))
          ],
        );
      },
    );
  }
}

class _StatCard extends StatelessWidget {
  final String title;
  final String value;
  final IconData icon;
  final Color iconBg;
  final Color cardColor;
  final Color strong;
  final Color subtle;

  const _StatCard({
    required this.title,
    required this.value,
    required this.icon,
    required this.iconBg,
    required this.cardColor,
    required this.strong,
    required this.subtle,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      color: cardColor,
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Row(
          children: [
            Container(
              width: 44,
              height: 44,
              decoration: BoxDecoration(color: iconBg.withOpacity(.15), borderRadius: BorderRadius.circular(10)),
              child: Icon(icon, color: iconBg, size: 26),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                Text(value, style: TextStyle(color: strong, fontSize: 20, fontWeight: FontWeight.w800)),
                const SizedBox(height: 2),
                Text(title, style: TextStyle(color: subtle, fontSize: 13)),
              ]),
            ),
          ],
        ),
      ),
    );
  }
}

class _SectionCard extends StatelessWidget {
  final String title;
  final Widget child;
  final Color cardColor;
  final Color strong;
  final Color subtle;

  const _SectionCard({
    required this.title,
    required this.child,
    required this.cardColor,
    required this.strong,
    required this.subtle,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      color: cardColor,
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(padding: const EdgeInsets.fromLTRB(14, 12, 14, 14), child: Column(children: [Row(children: [Text(title, style: TextStyle(color: strong, fontSize: 16, fontWeight: FontWeight.w800))]), const SizedBox(height: 10), child])),
    );
  }
}

class _ChipFilter extends StatelessWidget {
  final String value;
  final void Function(String) onChanged;
  final Color strong;
  final Color subtle;
  final bool isDark;

  const _ChipFilter({required this.value, required this.onChanged, required this.strong, required this.subtle, required this.isDark});

  @override
  Widget build(BuildContext context) {
    final options = ["All", "Active", "Inactive"];
    return Wrap(
      spacing: 8,
      children: options.map((opt) {
        final selected = value == opt;
        return ChoiceChip(
          label: Text(opt, style: TextStyle(color: selected ? Colors.white : strong, fontWeight: FontWeight.w600)),
          selected: selected,
          selectedColor: opt == "Active" ? Colors.green : (opt == "Inactive" ? Colors.red : Colors.blue),
          backgroundColor: (isDark ? Colors.white10 : Colors.black12).withOpacity(.06),
          onSelected: (_) => onChanged(opt),
        );
      }).toList(),
    );
  }
}

class _SearchField extends StatelessWidget {
  final String hint;
  final void Function(String) onChanged;
  final Color strong;
  final Color subtle;
  final bool isDark;

  const _SearchField({required this.hint, required this.onChanged, required this.strong, required this.subtle, required this.isDark});

  @override
  Widget build(BuildContext context) {
    return TextField(
      onChanged: onChanged,
      style: TextStyle(color: strong),
      decoration: InputDecoration(
        prefixIcon: Icon(Icons.search, color: subtle),
        hintText: hint,
        hintStyle: TextStyle(color: subtle),
        filled: true,
        fillColor: (isDark ? Colors.white10 : Colors.black12).withOpacity(.06),
        contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: BorderSide(color: subtle.withOpacity(.2))),
        enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: BorderSide(color: subtle.withOpacity(.15))),
        focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: BorderSide(color: Theme.of(context).colorScheme.primary, width: 1.2)),
      ),
    );
  }
}

class _StatusDot extends StatelessWidget {
  final Color color;
  const _StatusDot({required this.color});

  @override
  Widget build(BuildContext context) {
    return Container(width: 14, height: 14, decoration: BoxDecoration(color: color, shape: BoxShape.circle, boxShadow: [BoxShadow(color: color.withOpacity(.35), blurRadius: 8, spreadRadius: 1)]));
  }
}

class _LegendDot extends StatelessWidget {
  final Color color;
  final String text;
  const _LegendDot({required this.color, required this.text});

  @override
  Widget build(BuildContext context) {
    return Row(children: [Container(width: 12, height: 12, decoration: BoxDecoration(color: color, borderRadius: BorderRadius.circular(3))), const SizedBox(width: 6), Text(text, style: const TextStyle(fontWeight: FontWeight.w600))]);
  }
}